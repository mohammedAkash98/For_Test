setwd("C:/Users/Akash/Desktop/DataScienceAssignment1")
setwd("C:/Users/Akash/Desktop/DataScienceAssignment1")
my_data <- read.csv("KidneyData.csv")
head(my_data)
str(my_data)
str(my_data)
# Example data cleaning steps (these may vary based on the specific dataset)
my_data$BloodPressure <- ifelse(my_data$BloodPressure > 300, NA, my_data$BloodPressure)  # Handling outliers
my_data$Gender <- as.factor(my_data$Gender)  # Convert categorical to factor
my_data <- na.omit(my_data)  # Remove rows with missing values
my_data <- na.omit(my_data)  # Remove rows with missing values
# Split the data into training and test sets
set.seed(123)
sample_index <- sample(1:nrow(my_data), size = 0.7 * nrow(my_data))
train_data <- my_data[sample_index, ]
test_data <- my_data[-sample_index, ]
test_data <- my_data[-sample_index, ]
str(train_data)
library(ggplot2)
# Histogram for Age
ggplot(my_data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
labs(title = "Distribution of Age", x = "Age", y = "Frequency")
# Histogram for Blood Pressure
ggplot(kidney_data, aes(x = BloodPressure)) +
geom_histogram(binwidth = 10, fill = "lightgreen", color = "black") +
labs(title = "Distribution of Blood Pressure", x = "Blood Pressure", y = "Frequency")
# Histogram for Blood Pressure
ggplot(my_data, aes(x = BloodPressure)) +
geom_histogram(binwidth = 10, fill = "lightgreen", color = "black") +
labs(title = "Distribution of Blood Pressure", x = "Blood Pressure", y = "Frequency")
# Box plot for Blood Pressure by Kidney Disease status
ggplot(my_data, aes(x = as.factor(KidneyDisease), y = BloodPressure)) +
geom_boxplot(fill = c("pink", "lightblue")) +
labs(title = "Blood Pressure by Kidney Disease Status", x = "Kidney Disease (0 = No, 1 = Yes)", y = "Blood Pressure")
# Box plot for Blood Sugar by Kidney Disease status
ggplot(my_data, aes(x = as.factor(KidneyDisease), y = BloodSugar)) +
geom_boxplot(fill = c("pink", "lightblue")) +
labs(title = "Blood Sugar by Kidney Disease Status", x = "Kidney Disease (0 = No, 1 = Yes)", y = "Blood Sugar")
# Scatter plot for Blood Pressure vs. BMI
ggplot(my_data, aes(x = BMI, y = BloodPressure, color = as.factor(KidneyDisease))) +
geom_point(alpha = 0.7) +
labs(title = "Blood Pressure vs. BMI", x = "BMI", y = "Blood Pressure", color = "Kidney Disease")
# Scatter plot for Cholesterol vs. Blood Sugar
ggplot(my_data, aes(x = Cholesterol, y = BloodSugar, color = as.factor(KidneyDisease))) +
geom_point(alpha = 0.7) +
labs(title = "Cholesterol vs. Blood Sugar", x = "Cholesterol", y = "Blood Sugar", color = "Kidney Disease")
# Load necessary library for correlation matrix visualization
library(corrplot)
# Calculate the correlation matrix for numeric variables
correlation_matrix <- cor(my_data[, sapply(my_data, is.numeric)], use = "complete.obs")
# Calculate the correlation matrix for numeric variables
correlation_matrix <- cor(my_data[, sapply(my_data, is.numeric)], use = "complete.obs")
# Plot the correlation matrix
corrplot(correlation_matrix, method = "circle", type = "upper", tl.col = "black", tl.srt = 45, title = "Correlation Matrix of KidneyData Variables")
my_data$KidneyDisease <- as.factor(my_data$KidneyDisease)
set.seed(123)  # For reproducibility
sample_index <- sample(1:nrow(my_data), size = 0.7 * nrow(my_data))
train_data <- my_data[sample_index, ]
test_data <- my_data[-sample_index, ]
model <- glm(KidneyDisease ~ Age + BloodPressure + BloodSugar + Cholesterol + BMI + SmokingStatus + ElectricConductivity + pH + DissolvedOxygen + Turbidity + TotalDissolvedSolids + NitriteLevel + NitrateLevel + LeadConcentration + ArsenicConcentration + Humidity,
data = train_data,
family = "binomial")
summary(model)
model_improved <- step(model)
summary(model_improved)
a
sioafhksjd
library(car)
vif(model_improved)
a
as
model_interactions <- glm(KidneyDisease ~ Age + BloodPressure + BMI + BloodPressure:SmokingStatus,
data = train_data,
family = "binomial")
summary(model_interactions)
# Fit the improved logistic regression model
model_improved <- glm(KidneyDisease ~ Age + BloodPressure + BloodSugar + Cholesterol + BMI + SmokingStatus,
data = train_data,
family = "binomial")
# Display the summary of the improved model
summary(model_improved)
